//Generated by <cec version 1.0.0> -- Tue Jun  7 09:44:08 2022

#pragma once

struct Color{
    static const char Red = 0; 
    static const char Green = 1; 
    static const char Blue = 2;

    char value;  // Current value.
    Color(char value_) : value(value_){}
    Color(const Color & other){ 
        if(this != &other){ this->value = other.value; }
    }
    operator char () const{ return this->value; }

    // Public APIs.
    static const char _min() { return 0; }
    static const char _max() { return 2; }
    static const char _size() { return 3; }
    static const char* _type(){ return "char";}
    static const char* _name(){ return "Color";}
    static const char ** _keyTable(){
        static const char * keys[3] = {
            "Red",
            "Green",
            "Blue"
        };
        return keys;
    }

    static bool _good(const Color & obj){
        if (0 <= obj.value && obj.value <= 2){
            return true;
        }
        return false;
    }

    static bool _strcmp(const char *s1, const char *s2, const char limit = 32){
        if (s1 == nullptr || s2 == nullptr) return false;
        char count = 0;
        while (*s1 != '\0' && *s1 == *s2){
            ++s1;
            ++s2;
            if (++count > limit){ return false; }
        }
        return (*s1 == *s2);
    }

    static const char *_toString(const Color& obj){
        if (_good(obj)){ 
            return _keyTable()[obj.value - _min()];
        }
        return "";
    }

    static Color _fromString(const char *s){
        if(s != nullptr){
            for (char i = 0; i < 3; ++i){
                if (_strcmp(s, _keyTable()[i])){ 
                    return Color(i + _min()); 
                }
            }
        }
        return Color(3);
    }
};
